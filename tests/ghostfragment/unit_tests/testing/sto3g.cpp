#include "sto3g.hpp"
#include "water.hpp"
#include <catch2/catch.hpp>

using namespace testing;

/* Unit tests our function for creating molecular basis sets. We test it against
 * hard-coded answers for 0, 1, and 2 waters. The waters are generated by
 * the water() function (which works b/c it's unit tested in water.cpp) so we
 * just need to make sure the function copies the parameters and coordinates
 * into the resulting basis set correctly. It's assumed that if it can do that
 * for 0, 1, and 2 waters it can do it for an arbitrary number of waters.
 */

TEST_CASE("STO-3G") {
    using ao_basis_set     = ghostfragment::type::ao_basis_set;
    using atomic_basis_set = typename ao_basis_set::value_type;
    using shell_type       = typename atomic_basis_set::value_type;
    using vector_t         = std::vector<double>;

    // Taken from hard-coded basis sets in NWX
    // O
    vector_t c0_o{0.15432897, 0.53532814, 0.44463454};
    vector_t a0_o{130.7093200, 23.8088610, 6.4436083};
    vector_t c1{-0.09996723, 0.39951283, 0.70011547};
    vector_t c2{0.15591627, 0.60768372, 0.39195739};
    vector_t a1{5.0331513, 1.1695961, 0.3803890};

    // H
    vector_t c0{0.1543289673, 0.5353281423, 0.4446345422};
    vector_t a0{3.425250914, 0.6239137298, 0.1688554040};

    auto pure = shell_type::pure_type::pure;

    SECTION("No atoms") {
        ao_basis_set corr;
        REQUIRE(corr == sto3g(water(0)));
    }

    SECTION("One water") {
        ao_basis_set corr;
        auto mol = water(1);

        atomic_basis_set O0;
        O0.coord(0) = mol[0].coords()[0];
        O0.coord(1) = mol[0].coords()[1];
        O0.coord(2) = mol[0].coords()[2];
        O0.add_shell(pure, 0, c0_o, a0_o);
        O0.add_shell(pure, 0, c1, a1);
        O0.add_shell(pure, 1, c2, a1);

        atomic_basis_set H0;
        H0.coord(0) = mol[1].coords()[0];
        H0.coord(1) = mol[1].coords()[1];
        H0.coord(2) = mol[1].coords()[2];
        H0.add_shell(pure, 0, c0, a0);

        atomic_basis_set H1;
        H1.coord(0) = mol[2].coords()[0];
        H1.coord(1) = mol[2].coords()[1];
        H1.coord(2) = mol[2].coords()[2];
        H1.add_shell(pure, 0, c0, a0);

        corr.add_center(O0);
        corr.add_center(H0);
        corr.add_center(H1);
        REQUIRE(corr == sto3g(mol));
    }

    SECTION("Two waters") {
        ao_basis_set corr;
        auto mol = water(2);

        atomic_basis_set O0;
        O0.coord(0) = mol[0].coords()[0];
        O0.coord(1) = mol[0].coords()[1];
        O0.coord(2) = mol[0].coords()[2];
        O0.add_shell(pure, 0, c0_o, a0_o);
        O0.add_shell(pure, 0, c1, a1);
        O0.add_shell(pure, 1, c2, a1);

        atomic_basis_set H0;
        H0.coord(0) = mol[1].coords()[0];
        H0.coord(1) = mol[1].coords()[1];
        H0.coord(2) = mol[1].coords()[2];
        H0.add_shell(pure, 0, c0, a0);

        atomic_basis_set H1;
        H1.coord(0) = mol[2].coords()[0];
        H1.coord(1) = mol[2].coords()[1];
        H1.coord(2) = mol[2].coords()[2];
        H1.add_shell(pure, 0, c0, a0);

        atomic_basis_set O1;
        O1.coord(0) = mol[3].coords()[0];
        O1.coord(1) = mol[3].coords()[1];
        O1.coord(2) = mol[3].coords()[2];
        O1.add_shell(pure, 0, c0_o, a0_o);
        O1.add_shell(pure, 0, c1, a1);
        O1.add_shell(pure, 1, c2, a1);

        atomic_basis_set H2;
        H2.coord(0) = mol[4].coords()[0];
        H2.coord(1) = mol[4].coords()[1];
        H2.coord(2) = mol[4].coords()[2];
        H2.add_shell(pure, 0, c0, a0);

        atomic_basis_set H3;
        H3.coord(0) = mol[5].coords()[0];
        H3.coord(1) = mol[5].coords()[1];
        H3.coord(2) = mol[5].coords()[2];
        H3.add_shell(pure, 0, c0, a0);

        corr.add_center(O0);
        corr.add_center(H0);
        corr.add_center(H1);
        corr.add_center(O1);
        corr.add_center(H2);
        corr.add_center(H3);
        REQUIRE(corr == sto3g(mol));
    }

    SECTION("Throws if given a bad Z") {
        using molecule_type = ghostfragment::type::nuclei_set;
        using atom_type     = typename molecule_type::value_type;
        using cart_type     = typename atom_type::coord_type;
        molecule_type mol;
        mol.push_back(atom_type{"U", 92ul, cart_type{0.0, 0.0, 0.0}});
        REQUIRE_THROWS_AS(sto3g(mol), std::out_of_range);
    }
}

#include "fragment.hpp"
#include <catch2/catch.hpp>

using namespace testing;

/* The actual function wraps the system generated by the water function (so that
 * part should be right since the water function works and is unit tested) and
 * then defines fragments assuming that the waters are laid out in the same
 * order as the water function does (i.e. O, H, H)
 */

TEST_CASE("fragmented_water") {
    using frag_type = ghostfragment::type::fragmented_molecule;
    using size_type = frag_type::value_type::size_type;

    SECTION("Zero waters") {
        frag_type corr(water(0));
        REQUIRE(corr == fragmented_water(0));
    }

    SECTION("One water") {
        frag_type corr(water(1));
        auto w0 = corr.new_subset();
        w0.insert(0);
        w0.insert(1);
        w0.insert(2);
        corr.insert(w0);
        REQUIRE(corr == fragmented_water(1));
    }
}

..   This page is autogenerated by pluginplay::document_module. Any changes made
..   to this document will be overwritten the next time it is generated.

#####################
Bond-Based Fragmenter
#####################


Bond-Based Fragmenter
-------------------

This module takes as input a MolecularGraph representation of the molecular
system and an integer parameter nbonds, and outputs a FragmentedNuclei
object. The fragments are generated by looping over the nodes in
MolecularGraph and assembling all nodes a distance of nbonds or less away
from the node in question into a fragment. Each distinct fragment will be
output exactly once (i.e. no repeats).


***********
Please Cite
***********

No citations

**************
Property Types
**************

The following is a list of property types that this module satisfies.

- ``ghostfragment::pt::NuclearGraphToFragments``

*************
Module Inputs
*************

This section details the full list of inputs that the module accepts. Inputs
that are not listed as optional must have their value set before the module can
be run. Inputs can be set manually by calling the module's ``change_input``
function or by passing arguments to a property type.

Quick Reference
===============

The following table provides a quick summary of the inputs available to this
module. The columns are:

- ``Key``: The key used to retrieve the option,
- ``Default`` : The initial value, if one exists, and
- ``Description`` : A human readable description of what the option is used for.

+-----------------+---------+------------------------+
| Key             | Default | Description            |
+=================+=========+========================+
| Molecular Graph | N/A     | N/A                    |
+-----------------+---------+------------------------+
| nbonds          | 0       | bond width of fragment |
+-----------------+---------+------------------------+


Detailed Descriptions
=====================

The following subsections provide detailed descriptions of each input recognized
by this module. The subsection headings are the name of the input. Within each
subsection we list:

- ``Description`` : A human readable description of what the option is used for.
- ``Default Value`` : The initial value, if one exists.
- ``Optional?`` : Whether the value must be set inorder for the module to run.
- ``Opaque?`` : Does the value of the input influence memoization?.
- ``Domain Restrictions`` : Criteria a value must obey to be deemed valid.

Molecular Graph
---------------

- Description : N/A
- Default Value : N/A
- Optional? : False
- Opaque? : True
- Domain Restrictions :

  - Type == ghostfragment::NuclearGraph

nbonds
------

- Description : bond width of fragment
- Default Value : 0
- Optional? : False
- Opaque? : True
- Domain Restrictions :

  - Type == unsigned long


**************
Module Results
**************

This section tabulates the full list of results that the module returns. The
columns respectively are:

- Key: What the result is called
- Type: The C++ type of the result
- Description: What the result is/how it was computed.

.. note::

   A given property type will only return a subset of the available results. 
   Additional results can be accessed by using other property types or by using
   the Module class's advanced API.

+-----------+---------------------------------------------------------+-------------+
| Key       | Type                                                    | Description |
+===========+=========================================================+=============+
| Fragments | chemist::fragmenting::FragmentedNuclei<chemist::Nuclei> | N/A         |
+-----------+---------------------------------------------------------+-------------+


**********
Submodules
**********

The module defines no submodules.


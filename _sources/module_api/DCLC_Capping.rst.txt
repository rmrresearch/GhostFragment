..   This page is autogenerated by pluginplay::document_module. Any changes made
..   to this document will be overwritten the next time it is generated.

############
DCLC Capping
############


##################
DCLC Capper
##################

This module closes off the valencies of the input fragments using single
atoms. More specifically for each bond A-B, such that atom A is in the
fragment, and atom B is not, an atom (default is a hydrogen atom) will be
added to the fragment. The new atom will be placed at a distance determined
by the average A-X bond in the molecule, where X is the capping atom. If no
such bonds exist, then the bond distance is given by the length of the typical
A-X bond (i.e. the sum of the atoms' respective covalent radii).

The inputs to this module are fragments. In general these inputs are
non-disjoint, for this reason we choose to establish connectivity at an
atomic level.

#. Generate atomic connectivity
#. Determine caps we need
#. Pair each fragment with its set of caps



***********
Please Cite
***********

No citations

**************
Property Types
**************

The following is a list of property types that this module satisfies.

- ``ghostfragment::pt::CappedFragments``

*************
Module Inputs
*************

This section details the full list of inputs that the module accepts. Inputs
that are not listed as optional must have their value set before the module can
be run. Inputs can be set manually by calling the module's ``change_input``
function or by passing arguments to a property type.

Quick Reference
===============

The following table provides a quick summary of the inputs available to this
module. The columns are:

- ``Key``: The key used to retrieve the option,
- ``Default`` : The initial value, if one exists, and
- ``Description`` : A human readable description of what the option is used for.

+------------------------------+--------------------+------------------------+
| Key                          | Default            | Description            |
+==============================+====================+========================+
| capping atom                 | name : H,          | atom to use as the cap |
|                              | atomic number : 1, |                        |
|                              | mass : 1837.289,   |                        |
|                              | charge : 1,        |                        |
|                              | x : 0,             |                        |
|                              | y : 0,             |                        |
|                              | z : 0              |                        |
+------------------------------+--------------------+------------------------+
| charge for supersystem       | 0                  | N/A                    |
+------------------------------+--------------------+------------------------+
| Fragments to cap             | N/A                | N/A                    |
+------------------------------+--------------------+------------------------+
| multiplicity for supersystem | 1                  | N/A                    |
+------------------------------+--------------------+------------------------+
| System connectivity          | N/A                | N/A                    |
+------------------------------+--------------------+------------------------+


Detailed Descriptions
=====================

The following subsections provide detailed descriptions of each input recognized
by this module. The subsection headings are the name of the input. Within each
subsection we list:

- ``Description`` : A human readable description of what the option is used for.
- ``Default Value`` : The initial value, if one exists.
- ``Optional?`` : Whether the value must be set inorder for the module to run.
- ``Opaque?`` : Does the value of the input influence memoization?.
- ``Domain Restrictions`` : Criteria a value must obey to be deemed valid.

capping atom
------------

- Description : atom to use as the cap
- Default Value : name : H,
atomic number : 1,
mass : 1837.289,
charge : 1,
x : 0,
y : 0,
z : 0
- Optional? : False
- Opaque? : True
- Domain Restrictions :

  - Type == chemist::Nucleus

charge for supersystem
----------------------

- Description : N/A
- Default Value : 0
- Optional? : False
- Opaque? : True
- Domain Restrictions :

  - Type == short

Fragments to cap
----------------

- Description : N/A
- Default Value : N/A
- Optional? : False
- Opaque? : True
- Domain Restrictions :

  - Type == chemist::fragmenting::FragmentedNuclei<chemist::Nuclei>

multiplicity for supersystem
----------------------------

- Description : N/A
- Default Value : 1
- Optional? : False
- Opaque? : True
- Domain Restrictions :

  - Type == unsigned short

System connectivity
-------------------

- Description : N/A
- Default Value : N/A
- Optional? : False
- Opaque? : True
- Domain Restrictions :

  - Type == std::set<std::pair<unsigned long, unsigned long>, std::less<std::pair<unsigned long, unsigned long>>, std::allocator<std::pair<unsigned long, unsigned long>>>


**************
Module Results
**************

This section tabulates the full list of results that the module returns. The
columns respectively are:

- Key: What the result is called
- Type: The C++ type of the result
- Description: What the result is/how it was computed.

.. note::

   A given property type will only return a subset of the available results. 
   Additional results can be accessed by using other property types or by using
   the Module class's advanced API.

+------------------+---------------------------------------------------------+-------------+
| Key              | Type                                                    | Description |
+==================+=========================================================+=============+
| Capped Fragments | chemist::fragmenting::FragmentedNuclei<chemist::Nuclei> | N/A         |
+------------------+---------------------------------------------------------+-------------+


**********
Submodules
**********

This section details the full list of submodules that the module uses. For each
submodule we have listed:

- Key : The key used to refer to this particular callback.
- Property Type : The property type that the submodule must satisfy.
- Description : How the module will use the submodule.

+--------------+--------------------------------------+-------------+
| Key          | Property Type                        | Description |
+==============+======================================+=============+
| Connectivity | ghostfragment::pt::ConnectivityTable | N/A         |
+--------------+--------------------------------------+-------------+
